/*---------------------------------------------------------------------------*
 *  ggcode.d - LIBERO dialog data definitions for ggcode.c.                  *
 *  Generated by LIBERO 2.30 on  5 Aug, 1999,  9:34.                         *
 *  Schema file used: lrschema.c.                                            *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
enum {
    terminate_event = -1,
    abort_event = 0,
    anomaly_event = 1,
    append_event = 2,
    close_event = 3,
    comment_event = 4,
    copy_event = 5,
    define_event = 6,
    delete_event = 7,
    dump_event = 8,
    echo_event = 9,
    else_event = 10,
    elsif_event = 11,
    end_for_event = 12,
    end_if_event = 13,
    end_macro_event = 14,
    end_new_event = 15,
    end_of_schema_event = 16,
    end_while_event = 17,
    finished_event = 18,
    for_event = 19,
    if_event = 20,
    include_event = 21,
    interpret_event = 22,
    invoke_event = 23,
    macro_event = 24,
    new_event = 25,
    ok_event = 26,
    output_event = 27,
    rename_event = 28,
    text_event = 29,
    while_event = 30,
    xml_event = 31
};

enum {
    _LR_defaults_state = 2,
    _LR_STATE_after_init = 0,
    _LR_STATE_have_schema_line = 1,
    _LR_STATE_defaults = 2
};


/*- Variables used by dialog interpreter ------------------------------------*/

typedef int event_t;                    /*  Type for dialog entity           */
typedef void (fsmfunct) (void);         /*  Address of FSM function          */

static event_t
    _LR_event,                          /*  Event for state transition       */
    _LR_state,                          /*  Current dialog state             */
    _LR_savest,                         /*  Saved dialog state               */
    _LR_index,                          /*  Index into vector table          */
    the_next_event,                     /*  Next event from module           */
    the_exception_event;                /*  Exception event from module      */

static dbyte
   *_LR_vecptr;                         /*  Pointer into vector table        */

static Bool
    exception_raised;                   /*  TRUE if exception raised         */

/*- Function prototypes -----------------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

local  raise_exception                  (event_t event);
MODULE initialise_the_program           (void);
MODULE get_external_event               (void);
MODULE initialise_program_data          (void);
MODULE prepare_to_generate_code         (void);
MODULE start_initial_schema             (void);
MODULE get_next_schema_line             (void);
MODULE terminate_the_program            (void);
MODULE store_symbol_definition          (void);
MODULE store_macro_definition           (void);
MODULE skip_macro_body                  (void);
MODULE close_output_file                (void);
MODULE new_output_file                  (void);
MODULE extend_output_file               (void);
MODULE push_schema_position             (void);
MODULE start_included_schema            (void);
MODULE start_interpreted_schema         (void);
MODULE initialise_for_block             (void);
MODULE iterate_for_block                (void);
MODULE initialise_while_block           (void);
MODULE iterate_while_block              (void);
MODULE skip_if_block_if_false           (void);
MODULE skip_else_block_always           (void);
MODULE skip_elsif_block_always          (void);
MODULE close_if_block                   (void);
MODULE copy_file_as_specified           (void);
MODULE rename_file_as_specified         (void);
MODULE delete_file_as_specified         (void);
MODULE echo_text_to_console             (void);
MODULE close_schema                     (void);
MODULE destroy_data_structures          (void);
MODULE dump_symbol_table                (void);
MODULE copy_line_to_output              (void);
MODULE initialise_macro_block           (void);
MODULE close_macro_block                (void);
MODULE pop_schema_position              (void);
MODULE read_xml_file                    (void);
MODULE initialise_new_block             (void);
MODULE close_new_block                  (void);
MODULE verify_all_controls_closed       (void);

/*- Static areas ------------------------------------------------------------*/

static dbyte _LR_nextst [][32] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
     ,0,0
    },
    { 1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1
     ,1,1
    },
    { 0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    }
};

static dbyte _LR_action [][32] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0
     ,0,0
    },
    { 23,0,7,10,3,19,4,21,24,22,16,17,12,18,27,30,31,14,32,11,15,8
     ,9,26,5,29,0,6,20,25,13,28
    },
    { 0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    }
};

static dbyte _LR_vector [][5+1] =
{
    {0},
    {0,1,2,3,_LR_STOP},
    {4,_LR_STOP},
    {3,_LR_STOP},
    {5,3,_LR_STOP},
    {6,7,3,_LR_STOP},
    {8,9,3,_LR_STOP},
    {8,10,3,_LR_STOP},
    {11,12,3,_LR_STOP},
    {11,13,3,_LR_STOP},
    {8,3,_LR_STOP},
    {14,3,_LR_STOP},
    {15,3,_LR_STOP},
    {16,3,_LR_STOP},
    {17,3,_LR_STOP},
    {18,3,_LR_STOP},
    {19,3,_LR_STOP},
    {20,3,_LR_STOP},
    {21,3,_LR_STOP},
    {22,3,_LR_STOP},
    {23,3,_LR_STOP},
    {24,3,_LR_STOP},
    {25,3,_LR_STOP},
    {25,26,8,27,4,_LR_STOP},
    {28,3,_LR_STOP},
    {29,3,_LR_STOP},
    {11,30,3,_LR_STOP},
    {31,26,32,3,_LR_STOP},
    {33,3,_LR_STOP},
    {34,3,_LR_STOP},
    {35,3,_LR_STOP},
    {36,26,32,3,_LR_STOP},
    {8,27,4,_LR_STOP},
    {26,8,27,4,_LR_STOP}
};

static fsmfunct *_LR_module [] =
{
    initialise_program_data,
    prepare_to_generate_code,
    start_initial_schema,
    get_next_schema_line,
    terminate_the_program,
    store_symbol_definition,
    store_macro_definition,
    skip_macro_body,
    close_output_file,
    new_output_file,
    extend_output_file,
    push_schema_position,
    start_included_schema,
    start_interpreted_schema,
    initialise_for_block,
    iterate_for_block,
    initialise_while_block,
    iterate_while_block,
    skip_if_block_if_false,
    skip_else_block_always,
    skip_elsif_block_always,
    close_if_block,
    copy_file_as_specified,
    rename_file_as_specified,
    delete_file_as_specified,
    echo_text_to_console,
    close_schema,
    destroy_data_structures,
    dump_symbol_table,
    copy_line_to_output,
    initialise_macro_block,
    close_macro_block,
    pop_schema_position,
    read_xml_file,
    initialise_new_block,
    close_new_block,
    verify_all_controls_closed
};

