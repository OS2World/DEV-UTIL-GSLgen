<HTML><HEAD><!--Revised: 7 Aug, 1999 By: iMatix-->
<TITLE>Using GSLgen</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="gsldoc.htm">&lt;&lt;</A> | <A href="gsldoc2.htm">&lt;</A>
 | <A href="gsldoc4.htm">&gt;</A> | <A href="gsldoc5.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="gslgen.gif" ALT="GSLgen" WIDTH=100 HEIGHT=75 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=4><B>GSLgen</B><BR><FONT SIZE=2>Version 1.1
</TABLE>
<HR>
<H1><A NAME="TOC4">Using GSLgen</A></H1>

<H2><A NAME="TOC5">Description</A></H2>

<P>GSLgen is a general-purpose file generator. Its purpose is to generate code,
data or other files from an XML file and a schema.

<H3><A NAME="TOC6">Command-line Syntax</A></H3>

<P>To run GSLgen, use the following syntax
<PRE>  gslgen -&lt;option&gt; ... -&lt;attr&gt;[:&lt;value&gt;] ... filename ...
</PRE>

<P>Where filename is assumed to have an extension '.xml'
if necessary.

<P>Options currently recognised by GSLgen are:

<DL>
<DT><B>q, quiet</B>
  <DD>Suppresses copyright and other messages from GSLgen.
</DL>

<P>Attributes may have any legal XML name and value.  GSLgen copies
these attributes to the top-level item in the XML file(s) before code
generation begins.  The schema may access the value of these attributes
in the same way as any attribute defined in the XML file.

<H3><A NAME="TOC7">Getting Started</A></H3>

<P>How do I use GSLgen?

<UL>
<LI>If you have an XML file entitled test.xml, the simplest way to
invoke GSLgen is
</UL>
<PRE>  gslgen test.xml
</PRE>
<UL>
<LI>In this case the schema must be defined as an attribute of the top-level
  item defined in test.xml.  If this is not the case, or if you wish to
  use a different schema, use the form
</UL>
<PRE>  gslgen -schema:xxxxxxx.sch test.xml
</PRE>
<UL>
<LI>See GSLgen reference for a complete description of the command-line
syntax.
</UL>

<H3><A NAME="TOC8">A Hello World Example</A></H3>

<P>Try a 'hello world' test:

<P>hello.xml:

<PRE>  &lt;HWML&gt;
  &lt;WORLD NAME="World"&gt;
      &lt;HELLO NAME="Hello" /&gt;
  &lt;/WORLD&gt;
  &lt;/HWML&gt;
</PRE>

<P>hello.sch (dot starts in first column):

<PRE>  .for world
  .  for hello
  .    echo "$(name) $(world.name)"
  .  endfor
  .endfor
</PRE>

<P>Then, run GSLgen:

<PRE>  gslgen -schema:hello.sch hello.xml
</PRE>

<H3><A NAME="TOC9">A More Complex Example</A></H3>

<P>This is a schema which generates a simple DOS batch file to install programs
by copying them into various directories.  It's something you might want to
generate for specific projects:

<PRE>  .-
  .- install.sch   Generates install script from install.xml
  .-
  .output "install.bat"
  @echo off
  rem generated by gslgen from install.xml, $(schema)
  .for file
  .  if     type = "binary"
  echo $(name) -- \\usr\\bin
  copy $(name) \\usr\\bin &gt;nul
  .  elsif type = "schema"
  echo $(name) -- \\usr\\lib
  copy $(name) \\usr\\lib &gt;nul
  .  elsif type = "doc"
  echo $(name) -- \\usr\\doc
  copy $(name) \\usr\\doc &gt;nul
  .  endif
  copy $(name) install &gt;nul
  .endfor
</PRE>

<P>The input is an XML file like this:

<PRE>  &lt;INSTALL SCHEMA="install.sch"&gt;
  &lt;FILE name="gslgen.exe"  type="binary" /&gt;
  &lt;FILE name="gslgen.htm"  type="doc"    /&gt;
  &lt;FILE name="install.sch" type="schema" /&gt;
  &lt;FILE name="hello.sch"   type="schema" /&gt;
  &lt;/INSTALL&gt;
</PRE>

<P>We run GSLgen to process the XML file:

<PRE>  gslgen install.xml
</PRE>

<P>This is the result:

<PRE>  @echo off
  rem generated by gslgen from install.xml, install.sch
  echo gslgen.exe -- \usr\bin
  copy gslgen.exe \usr\bin &gt;nul
  copy gslgen.exe install &gt;nul
  echo gslgen.htm -- \usr\doc
  copy gslgen.htm \usr\doc &gt;nul
  copy gslgen.htm install &gt;nul
  echo install.sch -- \usr\lib
  copy install.sch \usr\lib &gt;nul
  copy install.sch install &gt;nul
  echo hello.sch -- \usr\lib
  copy hello.sch \usr\lib &gt;nul
  copy hello.sch install &gt;nul
</PRE>

<H3><A NAME="TOC10">Another Complex Example</A></H3>

<P>Try this command:

<PRE>  gslgen -schema:xmlfile.sch spfper.dbm
</PRE>

<P>This generates a C function, spfper.c, which handles a data table (in this
case a list of persons) as an XML file, with functions to read, save, and
update data in this table.  This is a good example of a complex GSL schema,
and one that is used in real life to handle data objects in iMatix Studio.

<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="gsldoc.htm">&lt;&lt;</A> | <A href="gsldoc2.htm">&lt;</A>
 | <A href="gsldoc4.htm">&gt;</A> | <A href="gsldoc5.htm">&gt;&gt;</A>
<BR><FONT SIZE=2>
| <A href="gsldoc.htm">The General Schema Language</A>
| <A href="gsldoc1.htm">Introduction</A>
| <A href="gsldoc2.htm">Installing GSLgen</A>
| <EM>Using GSLgen</EM>
| <A href="gsldoc4.htm">The General Schema Language (GSL)</A>
| <A href="gsldoc5.htm">GSLgen Developer's Reference</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0>
</A>
<BR><FONT SIZE=2>Copyright &#169; 1996-99 iMatix</TABLE>
</BODY></HTML>
