/*---------------------------------------------------------------------------*
 *  ggpars.d - LIBERO dialog data definitions for ggpars.c.                  *
 *  Generated by LIBERO 2.30 on  5 Aug, 1999,  9:34.                         *
 *  Schema file used: lrschema.c.                                            *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
enum {
    terminate_event = -1,
    abort_event = 0,
    anomaly_event = 1,
    append_event = 2,
    arguments_event = 3,
    as_event = 4,
    attribute_event = 5,
    by_event = 6,
    close_event = 7,
    comment_event = 8,
    copy_event = 9,
    define_event = 10,
    delete_event = 11,
    dump_event = 12,
    echo_event = 13,
    else_event = 14,
    elsif_event = 15,
    empty_stack_event = 16,
    end_for_event = 17,
    end_if_event = 18,
    end_macro_event = 19,
    end_new_event = 20,
    end_of_file_event = 21,
    end_of_line_event = 22,
    end_while_event = 23,
    equals_event = 24,
    error_event = 25,
    expression_event = 26,
    extend_event = 27,
    for_event = 28,
    from_event = 29,
    function_event = 30,
    identifier_event = 31,
    identifier_continue_event = 32,
    if_event = 33,
    include_event = 34,
    interpret_event = 35,
    invoke_event = 36,
    invoke_args_event = 37,
    literal_event = 38,
    literal_operand_event = 39,
    macro_event = 40,
    macro_args_event = 41,
    member_event = 42,
    new_event = 43,
    next_arg_event = 44,
    no_bracket_event = 45,
    number_event = 46,
    one_more_event = 47,
    open_event = 48,
    operand_event = 49,
    operator_event = 50,
    other_event = 51,
    output_event = 52,
    point_event = 53,
    quote_event = 54,
    quoted_event = 55,
    rename_event = 56,
    schema_event = 57,
    scope_event = 58,
    scope_identifier_event = 59,
    spaces_event = 60,
    substitute_event = 61,
    text_event = 62,
    unary_operator_event = 63,
    where_event = 64,
    while_event = 65,
    white_space_event = 66,
    xml_event = 67
};

enum {
    _LR_defaults_state = 25,
    _LR_STATE_after_init = 0,
    _LR_STATE_expecting_text = 1,
    _LR_STATE_expecting_first_operand = 2,
    _LR_STATE_expecting_quoted = 3,
    _LR_STATE_expecting_identifier = 4,
    _LR_STATE_expecting_identifier_continue = 5,
    _LR_STATE_after_scope = 6,
    _LR_STATE_expecting_scope_identifier = 7,
    _LR_STATE_after_literal_operand = 8,
    _LR_STATE_expecting_operand = 9,
    _LR_STATE_expecting_arguments = 10,
    _LR_STATE_expecting_operator = 11,
    _LR_STATE_expecting_substitute = 12,
    _LR_STATE_expecting_attribute = 13,
    _LR_STATE_expecting_schema = 14,
    _LR_STATE_expecting_white_space = 15,
    _LR_STATE_continuing_white_space = 16,
    _LR_STATE_expecting_define_value = 17,
    _LR_STATE_after_macro = 18,
    _LR_STATE_expecting_macro_args = 19,
    _LR_STATE_expecting_invoke_args = 20,
    _LR_STATE_expecting_xml = 21,
    _LR_STATE_expecting_new = 22,
    _LR_STATE_expecting_for = 23,
    _LR_STATE_returning = 24,
    _LR_STATE_defaults = 25
};


/*- Variables used by dialog interpreter ------------------------------------*/

typedef int event_t;                    /*  Type for dialog entity           */
typedef void (fsmfunct) (void);         /*  Address of FSM function          */

static event_t
    _LR_event,                          /*  Event for state transition       */
    _LR_state,                          /*  Current dialog state             */
    _LR_savest,                         /*  Saved dialog state               */
    _LR_index,                          /*  Index into vector table          */
    the_next_event,                     /*  Next event from module           */
    the_exception_event;                /*  Exception event from module      */

static dbyte
   *_LR_vecptr;                         /*  Pointer into vector table        */

static Bool
    exception_raised;                   /*  TRUE if exception raised         */

/*- Function prototypes -----------------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

local  raise_exception                  (event_t event);
MODULE initialise_the_program           (void);
MODULE get_external_event               (void);
MODULE read_schema_line                 (void);
MODULE get_first_token                  (void);
MODULE get_expression_token             (void);
MODULE signal_unexpected_end_of_file    (void);
MODULE rollback_memory_allocations      (void);
MODULE terminate_the_program            (void);
MODULE get_schema_command_token         (void);
MODULE insert_text_node                 (void);
MODULE count_token_length               (void);
MODULE get_output_token                 (void);
MODULE push_text_state                  (void);
MODULE push_substitute_state            (void);
MODULE insert_substitute_node           (void);
MODULE count_spaces_and_token_length    (void);
MODULE ready_for_op1_field              (void);
MODULE insert_spaces_only_node          (void);
MODULE set_extend_flag                  (void);
MODULE return_to_root_node              (void);
MODULE commit_memory_allocations        (void);
MODULE push_quote_character             (void);
MODULE push_operand_state               (void);
MODULE insert_literal_node              (void);
MODULE get_quoted_token                 (void);
MODULE insert_operator_node             (void);
MODULE ready_for_op2_field              (void);
MODULE return_to_parent                 (void);
MODULE push_literal_operand_state       (void);
MODULE push_scope_state                 (void);
MODULE insert_symbol_node               (void);
MODULE get_identifier_token             (void);
MODULE insert_member_node               (void);
MODULE get_first_identifier_token       (void);
MODULE insert_operand_node              (void);
MODULE push_identifier_continue_state   (void);
MODULE add_one_bracket                  (void);
MODULE rewind_to_same_token             (void);
MODULE pop_previous_state               (void);
MODULE push_quoted_state                (void);
MODULE set_line_break_flag              (void);
MODULE change_operand_to_symbol_node    (void);
MODULE move_op1_to_op2                  (void);
MODULE change_symbol_to_member_node     (void);
MODULE ready_for_null_field             (void);
MODULE insert_undefined_operator_node   (void);
MODULE change_to_function_node          (void);
MODULE push_function_state              (void);
MODULE push_arguments_state             (void);
MODULE close_one_bracket                (void);
MODULE ready_for_next_argument          (void);
MODULE ready_for_attribute_field        (void);
MODULE get_substitute_token             (void);
MODULE confirm_attribute_specified      (void);
MODULE push_attribute_state             (void);
MODULE insert_empty_node_if_needed      (void);
MODULE insert_comment_node              (void);
MODULE insert_close_node                (void);
MODULE insert_else_node                 (void);
MODULE insert_end_if_node               (void);
MODULE insert_end_for_node              (void);
MODULE insert_end_macro_node            (void);
MODULE insert_end_new_node              (void);
MODULE insert_end_while_node            (void);
MODULE insert_dump_node                 (void);
MODULE insert_output_node               (void);
MODULE insert_append_node               (void);
MODULE insert_include_node              (void);
MODULE insert_interpret_node            (void);
MODULE insert_delete_node               (void);
MODULE push_one_more_state              (void);
MODULE insert_copy_node                 (void);
MODULE insert_rename_node               (void);
MODULE insert_echo_node                 (void);
MODULE insert_abort_node                (void);
MODULE push_define_state                (void);
MODULE push_white_space_state           (void);
MODULE push_scope_identifier_state      (void);
MODULE insert_define_node               (void);
MODULE get_white_space_token            (void);
MODULE push_macro_state                 (void);
MODULE push_identifier_state            (void);
MODULE insert_macro_node                (void);
MODULE push_invoke_state                (void);
MODULE insert_invoke_node               (void);
MODULE push_xml_state                   (void);
MODULE insert_xml_node                  (void);
MODULE insert_if_node                   (void);
MODULE insert_elsif_node                (void);
MODULE push_new_state                   (void);
MODULE insert_new_node                  (void);
MODULE push_for_state                   (void);
MODULE insert_for_node                  (void);
MODULE insert_while_node                (void);
MODULE ready_for_op3_field              (void);
MODULE get_schema_token                 (void);
MODULE push_macro_args_state            (void);
MODULE expect_end_of_line               (void);
MODULE push_invoke_args_state           (void);
MODULE ready_for_pretty_field           (void);
MODULE ready_for_format_field           (void);
MODULE return_to_expression_parent      (void);
MODULE return_to_arguments_parent       (void);
MODULE signal_internal_error            (void);
MODULE signal_invalid_token             (void);

/*- Static areas ------------------------------------------------------------*/

static dbyte _LR_nextst [][68] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0
     ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0
     ,0,0,2,0,0,0,0,0,0
    },
    { 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,2,24,24,24,24,24,24,24,24,24,24,5,24
     ,24,24,4,24,24,24,11,24,2,24,24,24,24,11,3,24,24,24,24,24,24
     ,2,24,2,24,24,24,24
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,0
     ,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0
     ,0,0,2,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,2,0,0,0,0,0,0
    },
    { 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,5,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,2,24,24,24,24,24,24
    },
    { 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,6,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,4,24,24,24,24,24,24,24,24,24,24,5,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24
    },
    { 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,5,24
     ,24,24,4,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,2,24,24,24,24,24,24
    },
    { 24,24,24,24,24,24,24,11,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,8,24,24,24,24,24,24,24,24,24,24,5,24
     ,24,24,4,24,24,24,11,24,2,24,9,24,24,11,3,24,24,24,24,24,24
     ,2,24,9,24,24,24,24
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0
     ,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,11,0,9,0,0,0,0,11,3,0,0,0,0
     ,0,0,2,0,9,0,0,0,0
    },
    { 0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 24,24,24,24,24,24,24,11,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,11,24,24,24,24,24,24,24,24,24,24,5,24
     ,24,24,4,24,24,24,11,24,9,24,9,24,24,11,3,24,24,24,24,24,24
     ,2,24,9,24,24,24,24
    },
    { 0,0,0,0,0,13,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
     ,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12
     ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
     ,12,2,12,12,12,12,12,12
    },
    { 2,0,2,0,0,0,0,14,14,2,15,2,14,2,14,2,0,14,14,14,14,0,0,14,0
     ,0,0,0,15,0,0,0,0,2,2,2,15,0,0,0,15,0,0,15,0,0,0,0,0,0,0,0,2
     ,0,0,0,2,0,0,0,0,0,0,0,0,2,0,2
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,16,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,16,0,0,0,0,0,0,0
    },
    { 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,16,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,16,24,24,24,24,24,24,24
    },
    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,2,1,1,17,1
     ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     ,1,17,1,1,1,1,1,1,1
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,18,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,20,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,21,0
     ,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,21,0,0,0,0,0,0,0
    },
    { 0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,22,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0
    },
    { 0,0,0,0,15,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,23,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,23,0,0,0,2,0,0,0
    },
    { 0,0,0,10,0,13,0,0,0,0,17,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0
     ,23,0,11,4,5,0,0,0,20,24,0,8,18,19,0,22,0,0,0,2,0,11,0,0,0,0
     ,0,3,0,0,6,7,0,12,1,0,0,0,15,21
    },
    { 25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
     ,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
     ,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
     ,25,25,25,25,25,25,25,25
    }
};

static dbyte _LR_action [][68] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,7,0,0
     ,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0
     ,0,6,0,0,0,0,0,0
    },
    { 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,12,18
     ,18,18,14,18,18,18,11,18,16,18,18,18,18,13,9,18,18,18,18,18
     ,18,15,18,10,18,18,18,18
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,22,0
     ,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0
     ,0,0,0,20,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,25,0,0,0,0,0,0
    },
    { 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,24,18
     ,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,25,18,18,18,18,18,18
    },
    { 28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,17,28,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,27,28,28,28,28,28,28,28,28,28,28,26,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,28
    },
    { 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,29,18
     ,18,18,32,18,18,18,18,18,18,18,18,18,18,31,18,18,18,18,18,18
     ,18,30,18,18,18,18,18,18
    },
    { 18,18,18,18,18,18,18,41,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,37,18
     ,18,18,39,18,18,18,36,18,34,18,35,18,18,38,33,18,18,18,18,18
     ,18,40,18,35,18,18,18,18
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0
     ,0,0,0,0,0,0,0,0,12,0,0,0,14,0,0,0,11,0,16,0,0,0,0,13,9,0,0
     ,0,0,0,0,15,0,10,0,0,0,0
    },
    { 0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    },
    { 18,18,18,18,18,18,18,41,18,18,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,37,18
     ,18,18,39,18,18,18,36,18,43,18,35,18,18,38,33,18,18,18,18,18
     ,18,40,18,35,18,18,18,18
    },
    { 0,0,0,0,0,44,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
     ,48,48,48,48,48,48,48,45,48,48,48,48,48,48,48,48,48,48,46,48
     ,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
     ,48,47,48,48,48,48,48,48
    },
    { 66,0,59,0,0,0,0,50,49,63,67,62,57,65,51,72,0,53,52,54,55,0,0
     ,56,0,0,0,0,74,0,0,0,0,71,60,61,69,0,0,0,68,0,0,73,0,0,0,0,0
     ,0,0,0,58,0,0,0,64,0,0,0,0,0,0,0,0,75,0,70
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,77,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,76,0,0,0,0,0,0,0
    },
    { 78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78
     ,78,78,78,78,78,78,78,77,78,78,78,78,78,78,78,78,78,78,78,78
     ,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78
     ,76,78,78,78,78,78,78,78
    },
    { 83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83
     ,83,83,80,83,79,83,83,82,83,83,83,83,83,83,83,83,83,83,83,83
     ,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83
     ,81,83,83,83,83,83,83,83
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,17,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,17,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,82,0
     ,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,81,0,0,0,0,0,0,0
    },
    { 0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,82,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,81,0,0,0,0,0,0,0
    },
    { 0,0,0,0,90,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,82
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,81,0,0,0,91,0,0,0
    },
    { 0,0,0,100,0,101,0,0,0,0,103,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0
     ,0,104,0,99,96,97,0,0,0,95,86,0,95,95,2,0,103,0,0,0,102,0,95
     ,0,0,0,0,0,98,0,0,95,97,0,94,93,0,0,0,76,104
    },
    { 107,105,107,107,107,107,107,107,107,107,107,107,107,107,107
     ,107,107,107,107,107,107,3,107,107,107,106,107,107,107,107
     ,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107
     ,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107
     ,107,107,107,107,107,107,107,107
    }
};

static dbyte _LR_vector [][13+1] =
{
    {0},
    {0,1,_LR_STOP},
    {2,_LR_STOP},
    {3,4,5,_LR_STOP},
    {6,_LR_STOP},
    {7,8,9,_LR_STOP},
    {10,11,12,13,14,2,_LR_STOP},
    {15,16,17,18,5,_LR_STOP},
    {15,17,18,5,_LR_STOP},
    {19,20,21,14,13,22,_LR_STOP},
    {23,8,24,2,_LR_STOP},
    {21,14,7,8,25,2,_LR_STOP},
    {26,27,28,14,7,8,29,_LR_STOP},
    {28,13,2,_LR_STOP},
    {20,30,13,14,31,_LR_STOP},
    {26,27,32,8,14,33,11,12,13,14,2,_LR_STOP},
    {34,13,2,_LR_STOP},
    {0,2,_LR_STOP},
    {35,36,_LR_STOP},
    {7,8,22,_LR_STOP},
    {37,11,12,13,14,2,_LR_STOP},
    {15,13,36,_LR_STOP},
    {0,22,_LR_STOP},
    {15,38,0,22,_LR_STOP},
    {7,8,29,_LR_STOP},
    {33,11,12,13,14,2,_LR_STOP},
    {39,13,40,14,2,_LR_STOP},
    {41,13,40,14,31,_LR_STOP},
    {42,35,36,_LR_STOP},
    {27,7,8,29,_LR_STOP},
    {27,33,11,12,13,14,2,_LR_STOP},
    {13,36,_LR_STOP},
    {30,13,31,_LR_STOP},
    {19,43,24,20,21,14,13,22,_LR_STOP},
    {44,45,46,13,24,2,_LR_STOP},
    {23,13,24,2,_LR_STOP},
    {43,24,21,14,7,8,25,2,_LR_STOP},
    {43,24,26,27,28,14,7,8,29,_LR_STOP},
    {43,24,28,13,2,_LR_STOP},
    {43,24,20,30,13,14,31,_LR_STOP},
    {43,24,26,27,32,8,14,33,11,12,13,14,2,_LR_STOP},
    {47,13,2,_LR_STOP},
    {48,46,2,_LR_STOP},
    {43,24,34,13,2,_LR_STOP},
    {13,49,50,_LR_STOP},
    {0,50,_LR_STOP},
    {7,8,50,_LR_STOP},
    {51,52,11,12,13,14,2,_LR_STOP},
    {53,25,35,50,_LR_STOP},
    {54,18,5,_LR_STOP},
    {55,18,5,_LR_STOP},
    {56,18,5,_LR_STOP},
    {57,18,5,_LR_STOP},
    {58,18,5,_LR_STOP},
    {59,18,5,_LR_STOP},
    {60,18,5,_LR_STOP},
    {61,18,5,_LR_STOP},
    {62,18,5,_LR_STOP},
    {63,14,2,_LR_STOP},
    {64,14,2,_LR_STOP},
    {65,14,2,_LR_STOP},
    {66,14,2,_LR_STOP},
    {67,14,2,_LR_STOP},
    {68,69,14,2,_LR_STOP},
    {68,70,14,2,_LR_STOP},
    {71,14,2,_LR_STOP},
    {72,14,2,_LR_STOP},
    {73,74,75,76,14,77,_LR_STOP},
    {78,79,80,14,77,_LR_STOP},
    {81,79,82,14,77,_LR_STOP},
    {83,84,14,2,_LR_STOP},
    {85,14,2,_LR_STOP},
    {86,14,2,_LR_STOP},
    {87,27,79,88,14,77,_LR_STOP},
    {89,75,90,14,77,_LR_STOP},
    {91,14,2,_LR_STOP},
    {77,_LR_STOP},
    {0,77,_LR_STOP},
    {36,_LR_STOP},
    {92,2,_LR_STOP},
    {17,18,5,_LR_STOP},
    {93,_LR_STOP},
    {0,93,_LR_STOP},
    {92,35,9,_LR_STOP},
    {94,24,31,_LR_STOP},
    {94,23,8,24,31,_LR_STOP},
    {95,17,18,5,_LR_STOP},
    {96,46,24,2,_LR_STOP},
    {79,24,77,_LR_STOP},
    {79,92,77,_LR_STOP},
    {89,79,92,77,_LR_STOP},
    {89,97,2,_LR_STOP},
    {89,98,2,_LR_STOP},
    {9,_LR_STOP},
    {99,50,_LR_STOP},
    {25,2,_LR_STOP},
    {31,_LR_STOP},
    {29,_LR_STOP},
    {22,_LR_STOP},
    {100,2,_LR_STOP},
    {99,2,_LR_STOP},
    {50,_LR_STOP},
    {99,24,2,_LR_STOP},
    {25,93,_LR_STOP},
    {99,93,_LR_STOP},
    {101,4,5,_LR_STOP},
    {4,5,_LR_STOP},
    {102,4,5,_LR_STOP}
};

static fsmfunct *_LR_module [] =
{
    read_schema_line,
    get_first_token,
    get_expression_token,
    signal_unexpected_end_of_file,
    rollback_memory_allocations,
    terminate_the_program,
    get_schema_command_token,
    insert_text_node,
    count_token_length,
    get_output_token,
    push_text_state,
    push_substitute_state,
    insert_substitute_node,
    count_spaces_and_token_length,
    ready_for_op1_field,
    insert_spaces_only_node,
    set_extend_flag,
    return_to_root_node,
    commit_memory_allocations,
    push_quote_character,
    push_operand_state,
    insert_literal_node,
    get_quoted_token,
    insert_operator_node,
    ready_for_op2_field,
    return_to_parent,
    push_literal_operand_state,
    push_scope_state,
    insert_symbol_node,
    get_identifier_token,
    insert_member_node,
    get_first_identifier_token,
    insert_operand_node,
    push_identifier_continue_state,
    add_one_bracket,
    rewind_to_same_token,
    pop_previous_state,
    push_quoted_state,
    set_line_break_flag,
    change_operand_to_symbol_node,
    move_op1_to_op2,
    change_symbol_to_member_node,
    ready_for_null_field,
    insert_undefined_operator_node,
    change_to_function_node,
    push_function_state,
    push_arguments_state,
    close_one_bracket,
    ready_for_next_argument,
    ready_for_attribute_field,
    get_substitute_token,
    confirm_attribute_specified,
    push_attribute_state,
    insert_empty_node_if_needed,
    insert_comment_node,
    insert_close_node,
    insert_else_node,
    insert_end_if_node,
    insert_end_for_node,
    insert_end_macro_node,
    insert_end_new_node,
    insert_end_while_node,
    insert_dump_node,
    insert_output_node,
    insert_append_node,
    insert_include_node,
    insert_interpret_node,
    insert_delete_node,
    push_one_more_state,
    insert_copy_node,
    insert_rename_node,
    insert_echo_node,
    insert_abort_node,
    push_define_state,
    push_white_space_state,
    push_scope_identifier_state,
    insert_define_node,
    get_white_space_token,
    push_macro_state,
    push_identifier_state,
    insert_macro_node,
    push_invoke_state,
    insert_invoke_node,
    push_xml_state,
    insert_xml_node,
    insert_if_node,
    insert_elsif_node,
    push_new_state,
    insert_new_node,
    push_for_state,
    insert_for_node,
    insert_while_node,
    ready_for_op3_field,
    get_schema_token,
    push_macro_args_state,
    expect_end_of_line,
    push_invoke_args_state,
    ready_for_pretty_field,
    ready_for_format_field,
    return_to_expression_parent,
    return_to_arguments_parent,
    signal_internal_error,
    signal_invalid_token
};

